polymorphism:

// Java Program for Method overloading
// By using Different Types of Arguments 
 
// Class 1
// Helper class
class Helper {
 
    // Method with 2 integer parameters
    static int Multiply(int a, int b)
    {
        // Returns product of integer numbers
        return a * b;
    }
 
    // Method 2
    // With same name but with 2 double parameters
    static double Multiply(double a, double b)
    {
        // Returns product of double numbers
        return a * b;
    }
}
 
// Class 2
// Main class
class GFG {
    // Main driver method
    public static void main(String[] args)
    {
        // Calling method by passing
        // input as in arguments
        System.out.println(Helper.Multiply(2, 4));
        System.out.println(Helper.Multiply(5.5, 6.3));
    }
}

Encapsulation :

// Java Program to demonstrate
// Java Encapsulation
 
// Person Class
class Person {
    // Encapsulating the name and age
    // only approachable and used using
    // methods defined
    private String name;
    private int age;
 
    public String getName() 
{ return name; }
 
    public void setName(String name)
 { this.name = name; }
 
    public int getAge() 
{ return age; }
 
    public void setAge(int age)
 { this.age = age; }
}
 
// Driver Class
public class Main {
    // main function
    public static void main(String[] args)
    {
        // person object created
        Person person = new Person();
        person.setName("John");
        person.setAge(30);
 
        // Using methods to get the values from the
        // variables
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
    }
}

Abstraction:

// Java program to illustrate the 
// concept of Abstraction 
abstract class Shape { 
	String color; 

	// these are abstract methods 
	abstract double area(); 
	public abstract String toString(); 

	// abstract class can have the constructor 
	public Shape(String color) 
	{ 
		System.out.println("Shape constructor called"); 
		this.color = color; 
	} 

	// this is a concrete method 
	public String getColor() { return color; } 
} 
class Circle extends Shape { 
	double radius; 

	public Circle(String color, double radius) 
	{ 

		// calling Shape constructor 
		super(color); 
		System.out.println("Circle constructor called"); 
		this.radius = radius; 
	} 

	@Override double area() 
	{ 
		return Math.PI * Math.pow(radius, 2); 
	} 

	@Override public String toString() 
	{ 
		return "Circle color is " + super.getColor() 
			+ "and area is : " + area(); 
	} 
} 
class Rectangle extends Shape { 

	double length; 
	double width; 

	public Rectangle(String color, double length, 
					double width) 
	{ 
		// calling Shape constructor 
		super(color); 
		System.out.println("Rectangle constructor called"); 
		this.length = length; 
		this.width = width; 
	} 

	@Override double area() { return length * width; } 

	@Override public String toString() 
	{ 
		return "Rectangle color is " + super.getColor() 
			+ "and area is : " + area(); 
	} 
} 
public class Test { 
	public static void main(String[] args) 
	{ 
		Shape s1 = new Circle("Red", 2.2); 
		Shape s2 = new Rectangle("Yellow", 2, 4); 

		System.out.println(s1.toString()); 
		System.out.println(s2.toString()); 
	} 
}

Inheritance:

Syntax(

class DerivedClass extends BaseClass  
{  
   //methods and fields  
} 

)
// Java program to illustrate the
// concept of inheritance

// base class
class Bicycle {
	// the Bicycle class has two fields
	public int gear;
	public int speed;

	// the Bicycle class has one constructor
	public Bicycle(int gear, int speed)
	{
		this.gear = gear;
		this.speed = speed;
	}

	// the Bicycle class has three methods
	public void applyBrake(int decrement)
	{
		speed -= decrement;
	}

	public void speedUp(int increment)
	{
		speed += increment;
	}

	// toString() method to print info of Bicycle
	public String toString()
	{
		return ("No of gears are " + gear + "\n"
				+ "speed of bicycle is " + speed);
	}
}

// derived class
class MountainBike extends Bicycle {

	// the MountainBike subclass adds one more field
	public int seatHeight;

	// the MountainBike subclass has one constructor
	public MountainBike(int gear, int speed,
						int startHeight)
	{
		// invoking base-class(Bicycle) constructor
		super(gear, speed);
		seatHeight = startHeight;
	}

	// the MountainBike subclass adds one more method
	public void setHeight(int newValue)
	{
		seatHeight = newValue;
	}

	// overriding toString() method
	// of Bicycle to print more info
	@Override public String toString()
	{
		return (super.toString() + "\nseat height is "
				+ seatHeight);
	}
}

// driver class
public class Test {
	public static void main(String args[])
	{

		MountainBike mb = new MountainBike(3, 100, 25);
		System.out.println(mb.toString());
	}
}
